#!/bin/sh
# Argument = -b p(roduction)|d(evelopment) -c compiler -d

# Important: Do not move this file out of the McSync root folder.

# compile.sh builds McSync, tags it with the current machine architecture and sets
# its "modified" timestamp to the one of the most recently changed source file.
# This timestamp is then used by mcsync.sh to identify whether source code has
# changed since the last build.

usage()
{
cat << EOF
usage: $0 options

This script builds McSync.

OPTIONS:

   option defaults shown in [brackets]

   -h      Show this message
   -b      Build: production or development [production]
   -c      Compiler to use instead of cc [cc]
   -d      Display generated compiler command [false]
   -s      Link to CoreServices [false]

EOF
}

BUILD=
COMPILER=
DIAGNOSTICS=
CORESERVICES=
while getopts "hb:c:ds" OPTION
do
    case $OPTION in
        h)
             usage
             exit 1
             ;;
        b)
             BUILD=$OPTARG
             ;;
        c)
             COMPILER=$OPTARG
             ;;
        d)
             DIAGNOSTICS=1
             ;;
        s)
             CORESERVICES=1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

# Set defaults
if [[ -z $BUILD ]]; then
    BUILD="production"
fi

# accept abbreviations for build
if [ "$BUILD" == "d" ]; then
    BUILD="development"
fi

if [ "$BUILD" == "p" ]; then
    BUILD="production"
fi

if [[ -z $COMPILER ]]; then
    COMPILER="cc"
fi

if [[ -z $DIAGNOSTICS ]]; then
    DIAGNOSTICS=0
fi

if [[ -z $CORESERVICES ]]; then
    CORESERVICES=0
fi
# End of command line argument handling

MACHINE_ARCHITECTURE=`cc -v 2>&1 | grep Target: | sed 's/.*: *//'`

# MACHINE_ENDIANESS = 1 means little endian
MACHINE_ENDIANESS=`echo I | tr -d [:space:] | od -to2 | head -n1 | awk '{print $2}' | cut -c6`

echo "\nCreating executable mcsync.$MACHINE_ARCHITECTURE for $BUILD using $COMPILER.\n"

# Change into McSync root directory (the path of this script file)
cd "$( cd "$( dirname "$0" )" && pwd )"

cd source

OPT=
LIB="-lncurses -pthreads"
OUT="-o ../bin/mcsync.$MACHINE_ARCHITECTURE"
SRC="-I. engine/*.c cmd/*.c util/*.c"

if [ "$BUILD" == "development" ]; then
    OPT="-O0 -g -Wall -pedantic -std=c99"
elif [ "$BUILD" == "production" ]; then
    OPT="-O2 -pedantic -std=c99" # Add as soon as possible: -Werror
else
    echo "Invalid build (-b) option: \"$BUILD\". Use \"production\" or \"development\"."
    exit 1
fi

if [ $MACHINE_ENDIANESS == 0 ]; then
    OPT="$OPT -DBIG_ENDIAN_MACHINE"
fi

if [ $DIAGNOSTICS == 1 ]; then
   echo ${COMPILER} ${OPT} ${LIB} ${SRC} ${OUT}
fi

if [ $CORESERVICES == 1 ]; then
    LIB="$LIB -framework CoreServices"
fi

# The actual compilation command
${COMPILER} ${OPT} ${LIB} ${SRC} ${OUT}

if [ $? -ne 0 ]; then
    echo "\nBuild failed!\n"
    exit 1
fi

# Find the most recently modified source or header file
LATEST_FILE=`find .  \( -name "*.c" -o -name "*.h" \) -type f -exec stat -f "%m %N" {} \; \
            | sort -n | tail -1 | cut -f2- -d" "`

# Now set the timestamp of the executable to match the timestamp of the source.
touch -r $LATEST_FILE ../bin/mcsync.$MACHINE_ARCHITECTURE