#!/bin/sh

# Debug.sh is a utility script to help debug McSync on machines runnning OS X
# It opens a second terminal window where cgdb can start McSync using the piped
# back tty of said window. It has to stay in the root McSync folder to function
# properly.

# Important: Starting McSync in this way can cause troubles due to the transmogrifying
# of a process into ssh or expect. Only use it to debug other parts of the program.

# Look for prerequisites
command -v /usr/bin/osascript >/dev/null 2>&1 || { echo "This script runs on OS X only." >&2; exit 1; }
command -v cgdb >/dev/null 2>&1 || { echo "This script requires *cgdb* and it was not found on your machine." >&2; exit 1; }

# Build McSync for the most up to date version
make

# Test if build generated a binary
if [ ! -f "bin/mcsync" ]
then
  echo "Could not find bin/mcsync. Build failed?"
  exit
fi

# Find the McSync root path (the folder this script is in)
if [ $# -ne 1 ]; then
    PATHDIR=`pwd`
else
    PATHDIR=$1
fi

# Create a pipe for the communication of the not yet started
# McSync terminal tty
rm /tmp/mcsync-tty-pipe
mkfifo /tmp/mcsync-tty-pipe

# Create a new terminal window and write its tty into the pipe
/usr/bin/osascript <<EOF
    tell application "Terminal"
        do script "cd $PATHDIR; tty >> /tmp/mcsync-tty-pipe; sleep 86400;"
    end tell
EOF

# Start cgdb and tell it to connect to the tty sent using the pipe above.
/usr/bin/osascript <<EOF
    tell application "Terminal"
        do script "cd $PATHDIR; cgdb ./bin/mcsync;"
        delay 0.5
        activate window 2
            tell application "System Events"
            keystroke "tty $(tail /tmp/mcsync-tty-pipe)"
            keystroke return
        end
    end tell
EOF